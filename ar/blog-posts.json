[
  {
    "id": "ecommerce-growth",
    "link": "posts/ecommerce-growth/",
    "title": "5 طرق يمكن لتحليل البيانات أن يزيد أرباح المتاجر الإلكترونية",
    "date": "11 أغسطس 2025",
    "readTime": "6 دقائق",
    "tags": ["التجارة الإلكترونية", "تحليل بيانات"],
    "image": "assets/images/store.png",
    "excerpt": "اكتشف كيف يمكن لتحليل سلوك العملاء، تحسين الأسعار، وإدارة المخزون بذكاء أن يكون سلاحك السري لزيادة الأرباح وتحقيق النمو المستدام.",
    "author": {
      "name": "عمر بدر",
      "linkedin": "https://www.linkedin.com/in/omarbadrdata/",
      "avatar": "assets/images/profile.jpg"
    },
    "content": "<p>في عالم التجارة الإلكترونية شديد التنافسية، لم يعد النجاح يعتمد على جودة المنتج فقط، بل على مدى فهمك لبياناتك. البيانات هي النفط الجديد، وتحليلها هو مفتاح النمو المستدام. في هذا المقال، سأستعرض خمس طرق عملية ومباشرة يمكن لتحليل البيانات من خلالها أن يساهم في زيادة أرباح متجرك الإلكتروني.</p><h2>1. تقسيم العملاء (Customer Segmentation )</h2><p>ليس كل العملاء سواسية. باستخدام نماذج مثل RFM (Recency, Frequency, Monetary)، يمكنك تقسيم عملائك إلى شرائح استراتيجية: العملاء الأبطال (Champions)، العملاء الأوفياء، العملاء المعرضون للخطر، وغيرهم. هذا يمكنك من:</p><ul><li>إطلاق حملات تسويقية مخصصة لكل شريحة.</li><li>تقديم عروض حصرية للعملاء الأكثر قيمة لزيادة ولائهم.</li><li>إعادة استهداف العملاء الخاملين بعروض لا يمكن مقاومتها.</li></ul><h2>2. تحليل سلة المشتريات (Market Basket Analysis)</h2><p>هل تساءلت يوماً ما هي المنتجات التي يشتريها العملاء معاً؟ تحليل سلة المشتريات يجيب على هذا السؤال. من خلال فهم هذه العلاقات، يمكنك:</p><ul><li>عرض توصيات ذكية للمنتجات (Products you may also like).</li><li>إنشاء حزم وعروض (Bundles) تزيد من متوسط قيمة الطلب (Average Order Value).</li><li>تحسين تصميم صفحات المنتجات لعرض المنتجات ذات الصلة.</li></ul><h2>3. التسعير الديناميكي (Dynamic Pricing)</h2><p>بدلاً من تحديد سعر ثابت، يمكنك استخدام البيانات لتعديل الأسعار بشكل ديناميكي بناءً على عوامل مثل الطلب، أسعار المنافسين، الوقت من اليوم، وحتى سلوك المستخدم. هذا لا يعني رفع الأسعار دائماً، بل تحديد السعر الأمثل الذي يحقق أقصى ربح في كل لحظة.</p><h2>4. التنبؤ بالمخزون (Inventory Forecasting)</h2><p>نفاد المخزون يعني خسارة مبيعات، وزيادة المخزون تعني تجميد رأس المال. باستخدام بيانات المبيعات التاريخية، يمكن بناء نماذج تنبؤية تتوقع حجم الطلب على كل منتج، مما يساعدك على إدارة مخزونك بكفاءة وتجنب كلتا المشكلتين.</p><h2>5. تحليل مسار التحويل (Conversion Funnel Analysis)</h2><p>لماذا يضيف العملاء منتجات إلى السلة ثم يغادرون دون شراء؟ تحليل مسار التحويل (من زيارة الصفحة الرئيسية إلى إتمام الدفع) يساعدك على تحديد نقاط الضعف في موقعك. قد تكتشف أن عملية الدفع معقدة، أو أن تكاليف الشحن غير واضحة. إصلاح هذه النقاط يمكن أن يرفع معدل التحويل بشكل كبير.</p><hr><h3>الخلاصة</h3><p>تحليل البيانات لم يعد ترفاً، بل هو ضرورة حتمية لنجاح أي متجر إلكتروني. البدء في تطبيق هذه الاستراتيجيات سيمنحك ميزة تنافسية قوية ويضعك على الطريق الصحيح لتحقيق نمو حقيقي ومستدام.</p><p><strong>هل أنت مستعد للبدء؟ <a href='https://www.omarbadrdata.foo/ar/contact/'>تواصل معي</a> لمناقشة كيف يمكننا تطبيق هذه الحلول على متجرك.</strong></p>"
  },
  {
    "id": "heart-disease-prediction",
    "link": "posts/heart-disease-prediction/",
    "title": "شرح مبسط: كيف يعمل نموذج التنبؤ بأمراض القلب؟",
    "date": "11 2025 أغسطس",
    "readTime": "5 دقائق",
    "tags": ["تعلم الآلة", "شروحات"],
    "image": "assets/images/heart.png",
    "excerpt": "نظرة من الداخل على كيفية استخدام الخوارزميات لتحليل العوامل الطبية والتنبؤ بالمخاطر الصحية، بدون مصطلحات معقدة.",
    "author": {
      "name": "عمر بدر",
      "linkedin": "https://www.linkedin.com/in/omarbadrdata/",
      "avatar": "assets/images/profile.jpg"
    },
    "content": "<p>في عالم الطب الحديث، أصبح الذكاء الاصطناعي وتحليل البيانات يلعبان دوراً محورياً في تحسين الرعاية الصحية. أحد أهم التطبيقات هو نماذج التنبؤ بأمراض القلب، التي تساعد الأطباء على اكتشاف المرض قبل حدوثه. في هذا المقال، سأشرح لك بطريقة مبسطة كيف يعمل نموذج التنبؤ بأمراض القلب.</p><h2>1. جمع البيانات الطبية</h2><p>الخطوة الأولى هي جمع بيانات المرضى من مصادر متعددة مثل:</p><ul><li>تحاليل الدم ومستوى الكوليسترول.</li><li>ضغط الدم ومعدل ضربات القلب.</li><li>العمر، الجنس، والتاريخ العائلي للأمراض القلبية.</li><li>نمط الحياة (التدخين، النشاط البدني، النظام الغذائي).</li></ul><h2>2. معالجة وتنظيف البيانات</h2><p>البيانات الطبية غالباً ما تحتوي على معلومات ناقصة أو غير دقيقة. يقوم محللو البيانات بتنظيف هذه البيانات، وإزالة القيم الشاذة، وتحويلها إلى صيغة قابلة للاستخدام في النماذج الإحصائية أو خوارزميات التعلم الآلي.</p><h2>3. اختيار الخوارزمية المناسبة</h2><p>هناك عدة خوارزميات يمكن استخدامها، مثل:</p><ul><li>Logistic Regression (الانحدار اللوجستي).</li><li>Decision Trees (أشجار القرار).</li><li>Random Forest أو Gradient Boosting.</li><li>الشبكات العصبية الاصطناعية (Neural Networks) في الحالات الأكثر تعقيداً.</li></ul><h2>4. تدريب النموذج</h2><p>يتم تقسيم البيانات إلى مجموعتين: بيانات التدريب وبيانات الاختبار. يتعلم النموذج من بيانات التدريب العلاقة بين العوامل الصحية واحتمالية الإصابة بأمراض القلب.</p><h2>5. التنبؤ وتقييم الأداء</h2><p>بعد التدريب، يُستخدم النموذج للتنبؤ على بيانات جديدة. ثم يتم تقييم دقته باستخدام مقاييس مثل:</p><ul><li>الدقة (Accuracy).</li><li>المعامل F1 (F1-Score).</li><li>منحنى ROC و AUC.</li></ul><hr><h3>الخلاصة</h3><p>نموذج التنبؤ بأمراض القلب هو أداة قوية تساعد على الوقاية المبكرة وتحسين فرص العلاج. يعتمد نجاحه على جودة البيانات ودقة تصميمه. استخدام هذه النماذج يمكن أن ينقذ الأرواح ويقلل من تكلفة الرعاية الصحية.</p><p><strong>هل ترغب في معرفة كيف يمكننا بناء نموذج مخصص لك أو لمؤسستك الطبية؟ <a href='https://www.omarbadrdata.foo/ar/contact/'>تواصل معي</a> لنبدأ العمل.</strong></p>"
  },
  {
    "id": "python-humanize-package",
    "link": "posts/python-humanize-package/",
    "title": "شرح مبسط: كيف تستخدم مكتبة Humanize في بايثون؟",
    "date": "11 أغسطس 2025",
    "readTime": "7 دقائق",
    "tags": ["بايثون", "شروحات", "مكتبات"],
    "image": "assets/images/python_humanize.png",
    "excerpt": "اكتشف كيف يمكن لمكتبة Humanize تحويل البيانات التقنية مثل الأرقام، التواريخ، وحجم الملفات إلى نصوص سهلة القراءة والفهم للبشر.",
    "author": {
      "name": "عمر بدر",
      "linkedin": "https://www.linkedin.com/in/omarbadrdata/",
      "avatar": "assets/images/profile.jpg"
    },
     "content": "<p>في كثير من الأحيان، نحتاج كمطورين إلى عرض البيانات بطريقة تكون طبيعية وسهلة الفهم للمستخدمين. على سبيل المثال، بدلاً من عرض حجم ملف كرقم كبير مثل '15042934' بايت، من الأفضل عرضه كنص مثل '14.3 ميجابايت'. هنا يأتي دور مكتبة <strong>Humanize</strong> في بايثون.</p><p>مكتبة Humanize هي أداة بسيطة وفعالة لتحويل البيانات التقنية (مثل الأرقام، التواريخ، والأحجام) إلى صيغة يمكن للبشر قراءتها بسهولة. في هذا المقال، سنستعرض أهم وظائف هذه المكتبة وكيفية استخدامها.</p><h2>1. التثبيت (Installation)</h2><p>قبل البدء، يجب عليك تثبيت المكتبة. يمكنك فعل ذلك بسهولة باستخدام 'pip':</p><pre><code class='language-bash'>pip install humanize</code></pre><h2>2. تحويل الأرقام الكبيرة (intcomma)</h2><p>تساعد دالة <code>intcomma</code> على إضافة فواصل لآلاف في الأرقام الكبيرة، مما يجعلها أسهل في القراءة.</p><pre><code class='language-python'>import humanize\n\nnumber = 1234567\n\n# بدون استخدام المكتبة\nprint(f'الرقم الأصلي: {number}')\n\n# باستخدام humanize.intcomma\nprint(f'الرقم المنسق: {humanize.intcomma(number)}')</code></pre><p><strong>الناتج:</strong></p><pre><code>الرقم الأصلي: 1234567\nالرقم المنسق: 1,234,567</code></pre><h2>3. تحويل الأرقام إلى كلمات (intword)</h2><p>تقوم دالة <code>intword</code> بتحويل الأرقام الكبيرة جدًا إلى صيغة مختصرة باستخدام كلمات مثل 'مليون' أو 'مليار'.</p><pre><code class='language-python'>import humanize\n\nlarge_number = 1560000000\nsmall_number = 85000\n\nprint(f'الرقم الكبير: {humanize.intword(large_number)}')\nprint(f'الرقم الصغير: {humanize.intword(small_number)}')</code></pre><p><strong>الناتج:</strong></p><pre><code>الرقم الكبير: 1.6 مليار\nالرقم الصغير: 85.0 ألف</code></pre><h2>4. عرض التواريخ بشكل نسبي (naturalday و naturaltime)</h2><p>هذه من أقوى ميزات المكتبة. تسمح لك بعرض الفارق الزمني بين تاريخ معين والوقت الحالي بطريقة طبيعية.</p><ul><li><code>naturalday</code>: تعرض اليوم بالنسبة لليوم الحالي (مثل: اليوم، أمس، غداً).</li><li><code>naturaltime</code>: تعرض فارق الوقت بشكل دقيق (مثل: منذ 5 دقائق، بعد ساعتين).</li></ul><pre><code class='language-python'>import humanize\nfrom datetime import datetime, timedelta\n\nnow = datetime.now()\nyesterday = now - timedelta(days=1)\nfive_minutes_ago = now - timedelta(minutes=5)\n\nprint(f'عرض اليوم: {humanize.naturalday(yesterday)}')\nprint(f'عرض الوقت: {humanize.naturaltime(five_minutes_ago)}')</code></pre><p><strong>الناتج (سيكون مختلفًا بناءً على وقت التشغيل):</strong></p><pre><code>عرض اليوم: أمس\nعرض الوقت: منذ 5 دقائق</code></pre><h2>5. تحويل حجم الملفات (naturalsize)</h2><p>هذه الدالة مفيدة جدًا عند التعامل مع أحجام الملفات. تقوم بتحويل عدد البايتات إلى صيغة مفهومة (كيلوبايت، ميجابايت، جيجابايت).</p><pre><code class='language-python'>import humanize\n\nfile_size_bytes = 14784512\n\nprint(f'حجم الملف: {humanize.naturalsize(file_size_bytes)}')\n\n# يمكنك التحكم في التنسيق (مثلاً، استخدام النظام الثنائي)\nprint(f'حجم الملف (ثنائي): {humanize.naturalsize(file_size_bytes, binary=True)}')</code></pre><p><strong>الناتج:</strong></p><pre><code>حجم الملف: 14.8 ميجابايت\nحجم الملف (ثنائي): 14.1 ميبيبايت</code></pre><hr><h3>الخلاصة</h3><p>مكتبة Humanize هي أداة لا غنى عنها لأي مطور بايثون يرغب في تحسين تجربة المستخدم في تطبيقاته. من خلال بضعة أسطر من الكود، يمكنك تحويل البيانات المعقدة إلى نصوص بسيطة وأنيقة تجعل تطبيقك أكثر احترافية وسهولة في الاستخدام.</p><p><strong>هل ترغب في استكشاف مكتبات بايثون أخرى مفيدة؟ <a href='https://www.omarbadrdata.foo/ar/blog/'>تصفح بقية المقالات</a> في المدونة.</strong></p>"
  },
  {
    "id": "mysql-query-mechanics",
    "link": "posts/mysql-query-mechanics/",
    "title": "دليل شامل لبناء استعلامات SQL في MySQL",
    "date": "13 أغسطس 2025",
    "readTime": "10 دقائق",
    "tags": ["SQL", "MySQL", "قواعد البيانات"],
    "image": "assets/images/mysql_queries.jpg",
    "excerpt": "تعرف على جميع بنود استعلامات SQL في MySQL من الميكانيكا الأساسية إلى الفرز والتجميع، مع شرح تفصيلي وأمثلة عملية.",
    "author": {
      "name": "عمر بدر",
      "linkedin": "https://www.linkedin.com/in/omarbadrdata/",
      "avatar": "assets/images/profile.jpg"
    },
     "content": "<h2>1. ميكانيكا الاستعلامات (Query Mechanics)</h2><p>قبل إجراء أي استعلام، يجب إعداد الاتصال بخادم MySQL. تتضمن هذه العملية التحقق من اسم المستخدم وكلمة المرور، والتأكد من أن الخادم يعمل، وأن تطبيق العميل لديه الأذونات اللازمة. بمجرد إنشاء الاتصال، يمكن إرسال الاستعلامات ليتم تنفيذها.</p><p>الخطوات الأساسية لتنفيذ الاستعلام:</p><ul><li><strong>الاتصال بالخادم:</strong> يتم الاتصال بكل خادم MySQL كمعرف فريد عند الاتصال لأول مرة.</li><li><strong>التحقق من الأذونات:</strong> يجب أن يكون لدى المستخدم أذونات لتنفيذ الاستعلام والوصول إلى البيانات المطلوبة.</li><li><strong>التحقق من بناء الجملة (Syntax):</strong> يتأكد محلل الاستعلام من صحة بناء الجملة قبل التنفيذ.</li><li><strong>محلل الاستعلام (Query Optimizer):</strong> مسؤول عن تحديد الطريقة الأكثر كفاءة لتنفيذ الاستعلام، وتحديد ترتيب جداول الانضمام، واختيار المؤشرات المناسبة، وإنشاء خطة التنفيذ.</li><li><strong>مجموع النتائج (Result Set):</strong> بمجرد تنفيذ الاستعلام، يتم إرجاع النتائج في شكل جدول يحتوي على الأعمدة والصفوف المطلوبة.</li></ul><h2>2. بند SELECT</h2><p>هو البند الأهم في استعلامات SQL، حيث يحدد الأعمدة التي سيتم عرضها في النتائج.</p><ul><li>اختيار جميع الأعمدة باستخدام <code>*</code>.</li><li>اختيار أعمدة محددة بذكر أسمائها مفصولة بفواصل.</li><li>إضافة القيم الحرفية أو الأرقام أو السلاسل.</li><li>استخدام التعبيرات الرياضية أو الوظائف المدمجة.</li><li>إضافة وظائف معرفة من قبل المستخدم.</li><li>تعيين أسماء مستعارة للأعمدة باستخدام <code>AS</code> لزيادة وضوح النتائج.</li><li>إزالة التكرارات باستخدام <code>DISTINCT</code>.</li></ul><h2>3. بند FROM</h2><p>يحدد الجداول التي يتم جلب البيانات منها.</p><ul><li><strong>الجداول الدائمة:</strong> يتم إنشاؤها باستخدام <code>CREATE TABLE</code> وتظل في قاعدة البيانات.</li><li><strong>الجداول المشتقة:</strong> ناتجة عن استعلام فرعي وتخزن في الذاكرة.</li><li><strong>الجداول المؤقتة:</strong> تخزن البيانات مؤقتًا وتختفي بنهاية الجلسة.</li><li><strong>العروض (Views):</strong> استعلام مخزن يعمل كجدول افتراضي دون بيانات فعلية.</li><li><strong>ربط الجداول (JOIN):</strong> دمج الصفوف من جداول متعددة بناءً على عمود مشترك.</li><li><strong>أسماء الجداول المستعارة:</strong> لتبسيط الاستعلامات خاصة عند ربط جداول متعددة.</li></ul><h2>4. بند WHERE</h2><p>يستخدم لتصفية الصفوف بناءً على شروط محددة.</p><ul><li>التصفية المباشرة على الصفوف.</li><li>استخدام العوامل المنطقية <code>AND</code> و<code>OR</code> للجمع بين الشروط.</li><li>إنشاء شروط معقدة باستخدام الأقواس.</li></ul><h2>5. التجميع والتصنيف (GROUP BY وHAVING)</h2><p><code>GROUP BY</code> يجمع الصفوف التي لها قيم متطابقة في عمود أو أكثر، وغالبًا ما يستخدم مع دوال التجميع مثل <code>COUNT()</code> و<code>SUM()</code> و<code>AVG()</code>.</p><ul><li><strong>تجميع البيانات:</strong> لتحليل البيانات ضمن مجموعات بدلاً من الصفوف الفردية.</li><li><strong>HAVING:</strong> لتصفية المجموعات الناتجة بعد التجميع، على عكس WHERE الذي يعمل على الصفوف الفردية.</li></ul><h2>6. بند ORDER BY</h2><p>يستخدم لفرز النتائج تصاعديًا (<code>ASC</code>) أو تنازليًا (<code>DESC</code>).</p><ul><li>تحديد ترتيب الفرز حسب عمود واحد أو أكثر.</li><li>إمكانية الفرز بأكثر من عمود.</li><li>الفرز باستخدام تعبيرات أو وظائف.</li></ul><hr><h3>الخلاصة</h3><p>إتقان هذه البنود يمنحك القدرة على كتابة استعلامات SQL أكثر وضوحًا وكفاءة، مما يسهل تحليل البيانات واستخراج النتائج بدقة.</p>"
  },
  {
    "id": "professional-readme-prompt",
    "link": "posts/professional-readme-prompt/",
    "title": "من مجرد كود إلى قصة متكاملة: دليلك لكتابة README احترافي",
    "date": "13 أغسطس 2025",
    "readTime": "7 دقائق",
    "tags": ["GitHub", "كتابة تقنية", "علامة تجارية شخصية"],
    "image": "assets/images/professional_readme_prompt.png",
    "excerpt": "ملف README ليس مجرد توثيق، بل هو الواجهة الأولى لمشروعك. تعلم كيف تستخدم هذا البرومبت الاستراتيجي لتحويل الكود الصامت إلى قصة نجاح مقنعة.",
    "author": {
      "name": "عمر بدر",
      "linkedin": "https://www.linkedin.com/in/omarbadrdata/",
      "avatar": "assets/images/profile.jpg"
    },
    "content": "<h2>مقدمة: عندما لا يكون الكود كافيًا</h2><p>كل مطور يعرف هذا الشعور: بعد أسابيع من العمل الشاق، بناء خوارزميات معقدة، وحل مشاكل صعبة، أخيرًا، المشروع جاهز. الكود يعمل بكفاءة، والنتائج رائعة. لكن عندما ترفعه إلى GitHub، تضع عنوانًا بسيطًا وبضع أسطر في ملف README وتعتبر المهمة منتهية.</p><p>هنا تكمن المشكلة. <strong>المشروع الرائع مع ملف README ضعيف هو كتحفة فنية مخبأة في قبو مظلم؛ قيمتها موجودة، لكن لا أحد يستطيع رؤيتها.</strong> ملف README ليس مجرد توثيق، بل هو الواجهة، المسوّق، والمرشد السياحي لمشروعك. إنه الجسر الذي يصل بين عملك التقني المعقد وبين العالم الخارجي.</p><h2>لماذا يفشل معظم المطورين في كتابة README جيد؟</h2><p>السبب بسيط: نحن نركز على 'كيف' يعمل الكود، وننسى أن نشرح 'لماذا' هو مهم. ملف README الجيد لا يخاطب المطورين الآخرين فقط، بل يخاطب أيضًا:</p><ul><li><strong>مسؤولي التوظيف (Recruiters):</strong> الذين يريدون أن يفهموا القيمة التجارية للمشروع في 30 ثانية.</li><li><strong>المتعاونين المحتملين (Collaborators):</strong> الذين يحتاجون إلى معرفة هيكل المشروع وكيف يمكنهم المساهمة.</li><li><strong>'أنت' المستقبلي (Future You):</strong> الذي سيعود للمشروع بعد 6 أشهر ويحتاج إلى تذكر سبب كل قرار اتخذته.</li></ul><h2>الحل: برومبت استراتيجي لبناء قصة مشروعك</h2><p>لمساعدتك في بناء هذا الجسر، قمت بإعداد برومبت (Prompt) مصمم ليكون بمثابة 'خارطة طريق' لكتابة ملف README احترافي. هذا البرومبت لا يطلب منك مجرد ملء فراغات، بل يجبرك على التفكير في مشروعك من منظور استراتيجي.</p><h3>البرومبت النهائي</h3><blockquote><p>أنت كاتب تقني خبير ومتخصص في توثيق المشاريع البرمجية. مهمتك هي كتابة ملف README لمشروع برمجي بطريقة واضحة، احترافية، وشاملة. يجب أن يكون الملف مصممًا ليكون مفهومًا من قبل جمهور متنوع، بما في ذلك المطورين، مديري التوظيف، وأصحاب المصلحة غير التقنيين.</p><p><strong>عناصر الـ README المطلوبة:</strong></p><p><strong>الأساسيات (Fundamentals):</strong></p><ol><li><strong>العنوان (Title):</strong> عنوان جذاب ومعبر عن المشروع.</li><li><strong>جدول المحتويات (Table of Contents):</strong> لتسهيل التنقل.</li><li><strong>وصف المشروع (Project Description):</strong> نظرة عامة موجزة عن المشروع وأهدافه الرئيسية.</li><li><strong>المشكلة التي يحلها (Problem It Solves):</strong> اشرح بوضوح ما هي المشكلة أو الفجوة التي يعالجها هذا المشروع.</li></ol><p><strong>التفاصيل التقنية (Technical Details):</strong></p><ol><li><strong>التقنيات المستخدمة ولماذا (Tech Stack & Rationale):</strong> قائمة بالتقنيات والأدوات والمكتبات المستخدمة، مع شرح موجز لسبب اختيار كل منها.</li><li><strong>وصف العملية (The Process):</strong> اشرح الخطوات الرئيسية التي مر بها المشروع، من جمع البيانات (إن وجد) إلى بناء النموذج أو التطبيق. صف القرارات الهندسية المهمة التي اتخذتها.</li><li><strong>كيفية تشغيل المشروع (Getting Started):</strong> دليل واضح خطوة بخطوة حول كيفية تثبيت وتشغيل المشروع محليًا.</li></ol><p><strong>الطبقة السردية (Storytelling Layer):</strong></p><ol><li><strong>الدافع وراء المشروع (Motivation):</strong> ما الذي ألهمك للعمل على هذه المشكلة تحديدًا؟</li><li><strong>التحديات والحلول (Challenges & Solutions):</strong> اذكر 1-2 من التحديات التقنية الكبرى التي واجهتها وكيف تغلبت عليها. هذا يظهر قدرتك على حل المشكلات.</li><li><strong>النتائج والتأثير (Outcomes & Impact):</strong> كيف يبدو المنتج النهائي؟ ما هي النتائج الرئيسية للتحليل أو قدرات التطبيق؟</li><li><strong>القيود والتحسينات المستقبلية (Limitations & Future Work):</strong> اذكر أي قيود معروفة في المشروع والأفكار التي لديك لتطويره مستقبلًا. هذا يظهر النزاهة والتفكير الاستراتيجي.</li><li><strong>الاستخدام المقصود (Intended Use):</strong> من هو الجمهور المستهدف لهذا المشروع؟ وكيف يمكنهم الاستفادة منه؟</li><li><strong>الحقوق والشكر (Credits & License):</strong> اذكر أي مصادر بيانات أو أكواد استعنت بها، وحدد نوع الترخيص.</li></ol></blockquote><h3>كيف تستخدم البرومبت بفعالية؟</h3><ol><li><strong>اجمع معلوماتك أولاً:</strong> قبل استخدام البرومبت، جهّز نقاطًا مختصرة عن كل عنصر من العناصر المطلوبة لمشروعك.</li><li><strong>ابدأ الحوار مع الذكاء الاصطناعي:</strong> انسخ البرومبت، ثم قدم معلومات مشروعك التي جهزتها.</li><li><strong>اعتبره مسودة أولى:</strong> الناتج الذي ستحصل عليه من أداة الذكاء الاصطناعي هو مسودة ممتازة، وليس النسخة النهائية. قم بمراجعته، أضف لمستك الشخصية، وصحح أي تفاصيل ليعكس صوتك وخبرتك الحقيقية.</li></ol><hr><h3>الخلاصة: استثمر في واجهة مشروعك</h3><p>ملف README الاحترافي ليس رفاهية، بل هو استثمار مباشر في علامتك التجارية الشخصية كمطور. إنه يحول مستودعك من مجرد أرشيف للأكواد إلى معرض أعمال حي يروي قصة مهاراتك وقدرتك على تحقيق الإنجازات.</p>"
  },
  {
    "id": "data-analysis-guide",
    "link": "posts/data-analysis-guide/",
    "title": "إزاي تبدأ أي مشروع تحليل بيانات صح؟",
    "date": "20 أغسطس 2025",
    "readTime": "10 دقائق",
    "tags": ["تحليل بيانات", "إدارة مشاريع", "تحليل استكشافي", "Data Storytelling"],
    "image": "assets/images/data_analysis_guide.png",
    "excerpt": "دليل عملي خطوة بخطوة لتبدأ مشروع تحليل بيانات بطريقة منظمة واحترافية، من فهم الهدف إلى تحويل البيانات إلى قرارات مؤثرة.",
    "author": {
      "name": "عمر بدر",
      "linkedin": "https://www.linkedin.com/in/omarbadrdata/",
      "avatar": "assets/images/profile.jpg"
    },
    "content": "<h2>مقدمة</h2><p>في عالم بقى كله بيتكلم عن البيانات، أي شركة أو مؤسسة صغيرة أو كبيرة بتدرك إن \"البيانات هي البترول الجديد\". لكن الحقيقة إن البيانات لوحدها ملهاش قيمة من غير تحليل صح يقدر يحولها من أرقام وجداول لـ معلومات، ثم Insights، وأخيرًا قرارات.</p><p>اللي بيحدد نجاح أي مشروع تحليل بيانات مش إنك تعرف بايثون أو SQL أو Power BI كويس وبس، لكن كمان إزاي تبدأ صح. البداية الصح بتوفّر عليك وقت ومجهود وتخليك تركز على اللي فعلاً هيضيف قيمة للبزنس.</p><p>في المقال ده، هشارك معاك منهجية عملية بخطوات واضحة تساعدك تبدأ أي مشروع تحليل بيانات بشكل منظم واحترافي.</p><h2>1. افهم الهدف قبل البيانات</h2><p>أكتر خطأ شائع بيعمله محللي البيانات المبتدئين (وأحيانًا حتى المحترفين) إنهم يبدأوا يشتغلوا على البيانات مباشرة قبل ما يفهموا المشكلة أو السؤال الأساسي.</p><p><strong>أسئلة لازم تجاوب عليها:</strong></p><ul><li>إيه الهدف من التحليل؟</li><li>إيه القرار اللي صاحب البزنس أو الإدارة عاوزين ياخدوه بناءً على النتايج؟</li><li>إيه الـKPIs (مؤشرات الأداء) اللي يهمهم يعرفوها؟</li></ul><p><strong>مثال عملي:</strong></p><p>لو عندك شركة تجارة إلكترونية، السؤال ممكن يكون:</p><ul><li>\"ليه معدل تحويل الزوار لعملاء قليل؟\"</li><li>\"مين العملاء اللي عندهم احتمالية عالية يسيبوا الخدمة؟\"</li></ul><p>الفهم ده هو اللي هيحدد نوع البيانات اللي محتاج تجمعها، وطريقة التحليل اللي هتستخدمها.</p><h2>2. جمع وتجهيز البيانات (Data Collection & Preparation)</h2><p>المرحلة دي بتاخد 60-70% من وقت أي مشروع تحليل بيانات.</p><p>السبب بسيط: أغلب البيانات الواقعية غير كاملة، مليانة أخطاء، ومش متنسقة.</p><p><strong>خطوات عملية:</strong></p><ul><li><strong>جمع البيانات:</strong> من قواعد بيانات داخلية، ملفات Excel، APIs، أو حتى Web Scraping.</li><li><strong>تنظيف البيانات:</strong><ul><li>معالجة القيم المفقودة (Missing Values).</li><li>التعامل مع القيم الشاذة (Outliers).</li><li>توحيد التنسيقات (تواريخ، عملات، وحدات قياس).</li></ul></li><li><strong>دمج البيانات (Data Integration):</strong> لو عندك أكتر من مصدر بيانات، لازم تدمجهم بشكل ذكي عشان تطلع صورة كاملة.</li></ul><p><strong>مثال:</strong></p><p>لو بتحلل سلوك العملاء، ممكن تحتاج تجمع بيانات المبيعات + بيانات زيارات الموقع + بيانات خدمة العملاء.</p><h2>3. الاستكشاف والتحليل الوصفي (Exploratory Data Analysis - EDA)</h2><p>بعد ما البيانات بقت نظيفة، تبدأ مرحلة الفهم العميق.</p><p><strong>الهدف:</strong></p><ul><li>التعرف على الأنماط (Trends).</li><li>اكتشاف العلاقات بين المتغيرات.</li><li>ملاحظة أي شذوذ في البيانات.</li></ul><p><strong>أدوات ممكن تستخدمها:</strong></p><ul><li>Python (Pandas, Matplotlib, Seaborn, Plotly).</li><li>Power BI أو Tableau لو عايز Visual سريع.</li></ul><p><strong>مثال عملي:</strong></p><p>لو بتحلل بيانات متجر إلكتروني، ممكن تكتشف إن:</p><ul><li>أكتر الفئات الشرائية نشاطًا هي \"الشباب 18-24\".</li><li>معدل الشراء بيزيد في عطلة نهاية الأسبوع.</li><li>متوسط قيمة الطلب (AOV) أعلى عند العملاء اللي جُم من إعلانات فيسبوك مقارنة بجوجل.</li></ul><h2>4. التحليل المتقدم (Advanced Analytics)</h2><p>بعد ما استكشفت البيانات وفهمت أساسياتها، هنا ممكن تدخل في تحليل أعمق.</p><p><strong>أنواع التحليل:</strong></p><ul><li>تحليل إحصائي: لاختبار الفرضيات.</li><li>تحليل تنبؤي (Predictive Modeling): باستخدام Machine Learning (زي توقع مبيعات المستقبل).</li><li>تحليل توصياتي (Recommendation Systems): عشان تقترح منتجات أو خدمات للعملاء.</li></ul><p><strong>مثال عملي:</strong></p><p>لو بتشتغل في SaaS Company، ممكن تبني نموذج Churn Prediction يتوقع مين العملاء اللي ممكن يلغوا اشتراكهم الشهر الجاي، وتساعد فريق التسويق يعمل لهم حملات احتفاظ مخصصة.</p><h2>5. تحويل النتايج لقصص (Data Storytelling)</h2><p>واحدة من أهم المهارات اللي بتميز المحلل الناجح عن مجرد \"مُبرمج\" هي قدرته على حكي القصة وراء البيانات.</p><p><strong>نصائح:</strong></p><ul><li>استخدم Visualizations واضحة (خط، أعمدة، Pie – بس بحكمة).</li><li>قلل التفاصيل التقنية لما تشرح لغير المتخصصين.</li><li>اربط دايمًا النتايج بالـBusiness Goal الأساسي.</li></ul><p><strong>مثال:</strong></p><p>بدل ما تقول:</p><p>\"تحليل الانحدار اللوجستي أظهر إن احتمال الـChurn يزيد بنسبة 35% لما يقل معدل التفاعل الشهري تحت 3 مرات.\"</p><p>قول:</p><p>\"العملاء اللي بيتفاعلو أقل من 3 مرات في الشهر عندهم احتمالية أعلى بنسبة 35% يلغوا اشتراكهم. لو ركزنا نرفع معدل التفاعل لمرتين إضافيتين، ممكن نقلل معدل فقد العملاء بشكل كبير.\"</p><h2>6. بناء لوحة متابعة (Dashboard)</h2><p>التحليل مش بينتهي بملف Excel أو تقرير PDF. الأفضل تبني Dashboard تفاعلية تسهل على متخذي القرار متابعة المؤشرات في أي وقت.</p><p><strong>أدوات شائعة:</strong></p><ul><li>Power BI.</li><li>Tableau.</li><li>Google Data Studio (لو عاوز مجاني).</li></ul><p>الـDashboard بتخلي الإدارة تتابع KPIs زي:</p><ul><li>المبيعات اليومية.</li><li>معدل اكتساب العملاء الجدد.</li><li>نسبة الاحتفاظ بالعملاء.</li></ul><h2>7. التوصيات واتخاذ القرار</h2><p>التحليل ملوش قيمة لو وقف عند \"الوصف\". لازم ينتهي عند:</p><ul><li>توصيات واضحة (Recommendations).</li><li>إجراءات عملية (Actions).</li><li>قياس النتائج بعد التنفيذ.</li></ul><p><strong>مثال عملي:</strong></p><p>لو اكتشفت إن 20% من العملاء بيحققوا 80% من الإيرادات (قاعدة باريتو)، ممكن توصية التحليل تكون:</p><p>\"خصصوا حملات ولاء (Loyalty Programs) للشريحة دي.\"</p><h2>8. استمرارية التحليل (Iteration)</h2><p>تحليل البيانات مش عملية لمرة واحدة، لكنه دورة مستمرة.</p><p><strong>كل مشروع يفتح باب لأسئلة جديدة.</strong></p><p>كل ما البيانات تكبر وتتنوع، بتحتاج مراجعة وتحديث التحليلات.</p><p>المحلل الشاطر هو اللي بيبني نظام متكامل لتحليل البيانات، مش مجرد مشروع لمرة واحدة.</p><h2>أخطاء شائعة لازم تتجنبها</h2><ul><li>القفز على الأدوات قبل فهم المشكلة.</li><li>الإفراط في الـVisualizations (الهدف مش تزويق شكل، الهدف توصيل رسالة).</li><li>تجاهل السياق البزنس والتركيز على الجانب التقني فقط.</li><li>مشاركة النتايج بلغة تقنية مع مدير أو صاحب بزنس مش متخصص.</li></ul><hr><h2>الخلاصة</h2><p>لو عايز تبدأ أي مشروع تحليل بيانات صح:</p><ol><li>افهم الهدف.</li><li>جهّز البيانات كويس.</li><li>اعمل تحليل استكشافي.</li><li>عمّق التحليل لو محتاج.</li><li>احكي القصة من خلال البيانات.</li><li>ابني Dashboard للتتبع.</li><li>حوّل النتايج لقرارات.</li><li>كرر العملية باستمرار.</li></ol><p>التحليل الصح مش بيقاس بعدد الأكواد اللي كتبتها ولا عدد الرسومات اللي طلعتها، لكن بمدى القيمة اللي ضفتها للبزنس.</p>"
  },
  {
  "id": "sql-subqueries-guide",
  "link": "posts/sql-subqueries-guide/",
  "title": "الاستعلامات الفرعية (Subquery) في SQL: دليل شامل ومفصل",
  "date": "28 أغسطس 2025",
  "readTime": "15 دقيقة",
  "tags": ["SQL", "قواعد البيانات", "شروحات تقنية"],
  "image": "assets/images/sql_subquery_cover.jpg",
  "excerpt": "دليل متكامل يفصل كل ما تحتاج لمعرفته عن الاستعلامات الفرعية في SQL، من الأنواع المختلفة وأماكن الاستخدام إلى أفضل الممارسات لتحسين الأداء.",
  "author": {
    "name": "عمر بدر",
    "linkedin": "https://www.linkedin.com/in/omarbadrdata/",
    "avatar": "assets/images/omar.jpg"
  },
  "content": "<h2>مقدمة تعريفية</h2><h3>تعريف الـ Subquery ولماذا نستخدمه</h3><p>الاستعلام الفرعي (Subquery) هو استعلام SQL مدمج داخل استعلام آخر. يُعرف أيضاً بالاستعلام الداخلي (Inner Query) أو الاستعلام المتداخل (Nested Query)، بينما يُطلق على الاستعلام الذي يحتويه اسم الاستعلام الخارجي (Outer Query).</p><p>يمكن استخدام الاستعلامات الفرعية في بيانات SELECT، INSERT، UPDATE، وDELETE، وهي تُنفذ قبل الاستعلام الخارجي وتمرر نتائجها لإكمال العملية.</p><h3>أهميته في كتابة استعلامات متقدمة</h3><p>الاستعلامات الفرعية توفر عدة فوائد مهمة في كتابة استعلامات SQL متقدمة:</p><ul><li><strong>تجنب تكرار الكود:</strong> تساعد في تجنب تكرار المنطق المعقد في أماكن متعددة.</li><li><strong>تحسين قابلية القراءة:</strong> تقسم الاستعلامات المعقدة إلى كتل قابلة للفهم والإدارة.</li><li><strong>المرونة في التصفية:</strong> تسمح بتصفية البيانات ديناميكياً بناءً على نتائج استعلامات أخرى.</li><li><strong>العمليات المعقدة:</strong> تُمكن من إجراء حسابات أو تحليلات معقدة عبر تقسيم العمل إلى خطوات.</li></ul><hr><h2>أنواع Subquery مع الشرح المفصل والأمثلة</h2><h3>Single-row subquery</h3><p>هذا النوع يعيد صفاً واحداً فقط كنتيجة، ويُستخدم عادة مع عوامل المقارنة مثل <code>=</code>, <code>&gt;</code>, <code>&lt;</code>.</p><pre><code class='language-sql'>-- البحث عن الموظف الذي يحصل على أعلى راتب\nSELECT * FROM Employees\nWHERE Salary = (SELECT MAX(Salary) FROM Employees);\n\n-- البحث عن الموظفين الذين رواتبهم أكبر من متوسط الرواتب\nSELECT EmployeeName, Salary FROM Employees \nWHERE Salary > (SELECT AVG(Salary) FROM Employees);</code></pre><h3>Multiple-row subquery</h3><p>يعيد هذا النوع عدة صفوف كنتيجة، ويتطلب استخدام عوامل يمكنها التعامل مع قيم متعددة مثل <code>IN</code>, <code>ANY</code>, <code>ALL</code>.</p><pre><code class='language-sql'>-- باستخدام IN: البحث عن الموظفين في أقسام محددة\nSELECT * FROM Employees\nWHERE DepartmentID IN (SELECT DepartmentID FROM Departments \n                      WHERE Location = 'New York');\n\n-- باستخدام ANY: البحث عن المنتجات الأغلى من أي منتج في فئة معينة\nSELECT ProductName, Price FROM Products\nWHERE Price > ANY (SELECT Price FROM Products WHERE Category = 'Electronics');\n\n-- باستخدام ALL: البحث عن المنتجات الأغلى من جميع المنتجات في فئة معينة\nSELECT ProductName, Price FROM Products\nWHERE Price > ALL (SELECT Price FROM Products WHERE Category = 'Books');</code></pre><h3>Multiple-column subquery</h3><p>هذا النوع يسترجع أكثر من عمود واحد، مما يُمكن من مقارنة قيم متعددة في نفس الوقت.</p><pre><code class='language-sql'>-- البحث عن الطلبات التي تطابق أقل سعر لكل منتج\nSELECT OrderID, ProductID, UnitPrice FROM OrderDetails\nWHERE (ProductID, UnitPrice) IN \n    (SELECT ProductID, MIN(UnitPrice) FROM OrderDetails \n     GROUP BY ProductID);\n\n-- البحث عن الموظفين الذين يعملون في نفس القسم ولديهم نفس المسمى الوظيفي\nSELECT * FROM Employees E1\nWHERE (DepartmentID, JobTitle) IN \n    (SELECT DepartmentID, JobTitle FROM Employees E2 \n     WHERE E1.EmployeeID != E2.EmployeeID);</code></pre><h3>Correlated subquery مقابل Non-correlated subquery</h3><h4>Non-correlated subquery</h4><p>الاستعلام الفرعي غير المترابط يُنفذ بشكل مستقل عن الاستعلام الخارجي ولا يعتمد على قيم من الاستعلام الخارجي.</p><pre><code class='language-sql'>-- استعلام غير مترابط - يُنفذ مرة واحدة فقط\nSELECT EmployeeID, EmployeeName, Salary\nFROM Employees\nWHERE Salary > (SELECT AVG(Salary) FROM Employees);</code></pre><h4>Correlated subquery</h4><p>الاستعلام الفرعي المترابط يعتمد على قيم من الاستعلام الخارجي ويُنفذ مرة واحدة لكل صف في الاستعلام الخارجي.</p><pre><code class='language-sql'>-- استعلام مترابط - يُنفذ لكل موظف على حدة\nSELECT e.EmployeeName, e.Salary, e.DepartmentID\nFROM Employees e\nWHERE e.Salary > (SELECT AVG(Salary) \n                  FROM Employees \n                  WHERE DepartmentID = e.DepartmentID);\n\n-- مثال آخر: البحث عن العملاء الذين لديهم أكثر من طلب واحد\nSELECT CustomerName FROM Customers C\nWHERE EXISTS (SELECT 1 FROM Orders O \n              WHERE O.CustomerID = C.CustomerID \n              HAVING COUNT(*) > 1);</code></pre><h3>Nested subqueries (Subquery داخل Subquery)</h3><p>يمكن أن تحتوي الاستعلامات الفرعية على استعلامات فرعية أخرى، مما يُمكن من إنشاء منطق معقد.</p><pre><code class='language-sql'>-- البحث عن المنتجات التي كميتها أكبر من منتج معين\nSELECT ProductName, Quantity FROM Products \nWHERE ProductID IN \n    (SELECT ProductID FROM OrderDetails \n     WHERE Quantity > \n        (SELECT Quantity FROM OrderDetails \n         WHERE OrderDetailID = 10));\n\n-- مثال أكثر تعقيداً: البحث عن الموظفين في الأقسام التي متوسط رواتبها أعلى من متوسط عام\nSELECT * FROM Employees\nWHERE DepartmentID IN \n    (SELECT DepartmentID FROM Employees\n     GROUP BY DepartmentID\n     HAVING AVG(Salary) > \n        (SELECT AVG(Salary) FROM Employees));</code></pre><hr><h2>أماكن استخدام Subquery</h2><h3>في جملة SELECT</h3><p>يُستخدم الاستعلام الفرعي في جملة SELECT لإنشاء أعمدة محسوبة ديناميكياً.</p><pre><code class='language-sql'>-- إضافة عمود يحتوي على عدد الطلبات لكل عميل\nSELECT CustomerID, CustomerName,\n       (SELECT COUNT(*) FROM Orders O \n        WHERE O.CustomerID = C.CustomerID) AS TotalOrders\nFROM Customers C;\n\n-- إضافة عمود يحتوي على أعلى سعر في نفس الفئة\nSELECT ProductName, Price, Category,\n       (SELECT MAX(Price) FROM Products P2 \n        WHERE P2.Category = P1.Category) AS MaxPriceInCategory\nFROM Products P1;</code></pre><h3>في جملة FROM كجدول وهمي</h3><p>يمكن استخدام الاستعلام الفرعي في جملة FROM لإنشاء جدول مؤقت.</p><pre><code class='language-sql'>-- حساب متوسط المشتريات لكل عميل\nSELECT CustomerID, CustomerName, AvgPurchase\nFROM (\n    SELECT C.CustomerID, C.CustomerName,\n           ROUND(SUM(O.TotalAmount) / COUNT(O.OrderID), 2) AS AvgPurchase\n    FROM Customers C\n    INNER JOIN Orders O ON C.CustomerID = O.CustomerID\n    GROUP BY C.CustomerID, C.CustomerName\n) AS CustomerStats\nWHERE AvgPurchase > 500;\n\n-- إنشاء تقرير مبيعات شهري\nSELECT Month, TotalSales, AvgOrderValue\nFROM (\n    SELECT MONTH(OrderDate) AS Month,\n           SUM(TotalAmount) AS TotalSales,\n           AVG(TotalAmount) AS AvgOrderValue\n    FROM Orders\n    WHERE YEAR(OrderDate) = 2024\n    GROUP BY MONTH(OrderDate)\n) AS MonthlySales\nORDER BY Month;</code></pre><h3>في جملة WHERE للفلاتر</h3><p>هذا أكثر الاستخدامات شيوعاً للاستعلامات الفرعية.</p><pre><code class='language-sql'>-- البحث عن العملاء الذين لم يقوموا بأي طلبات\nSELECT CustomerName FROM Customers\nWHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders \n                        WHERE CustomerID IS NOT NULL);\n\n-- البحث عن المنتجات التي لم يتم طلبها مطلقاً\nSELECT ProductName FROM Products\nWHERE ProductID NOT EXISTS (SELECT 1 FROM OrderDetails \n                           WHERE ProductID = Products.ProductID);\n\n-- البحث عن الطلبات الأكبر من متوسط قيمة الطلبات في نفس الشهر\nSELECT OrderID, OrderDate, TotalAmount\nFROM Orders O1\nWHERE TotalAmount > (SELECT AVG(TotalAmount) FROM Orders O2\n                    WHERE MONTH(O1.OrderDate) = MONTH(O2.OrderDate)\n                    AND YEAR(O1.OrderDate) = YEAR(O2.OrderDate));</code></pre><h3>في جملة HAVING مع Group By</h3><p>يُستخدم مع التجميع لتصفية المجموعات بناءً على شروط معقدة.</p><pre><code class='language-sql'>-- البحث عن الأقسام التي متوسط رواتبها أعلى من المتوسط العام\nSELECT DepartmentID, AVG(Salary) AS AvgSalary\nFROM Employees\nGROUP BY DepartmentID\nHAVING AVG(Salary) > (SELECT AVG(Salary) FROM Employees);\n\n-- البحث عن العملاء الذين إجمالي مشترياتهم أعلى من متوسط المشتريات\nSELECT CustomerID, SUM(TotalAmount) AS TotalPurchases\nFROM Orders\nGROUP BY CustomerID\nHAVING SUM(TotalAmount) > (SELECT AVG(CustomerTotal) \n                          FROM (SELECT SUM(TotalAmount) AS CustomerTotal \n                               FROM Orders GROUP BY CustomerID) AS AvgCalc);</code></pre><h3>في جملة UPDATE / DELETE</h3><p>الاستعلامات الفرعية مفيدة جداً في عمليات التحديث والحذف المشروطة.</p><h4>أمثلة عملية للـ UPDATE:</h4><pre><code class='language-sql'>-- تحديث رواتب الموظفين بناءً على متوسط القسم\nUPDATE Employees \nSET Salary = Salary * 1.1\nWHERE DepartmentID IN (SELECT DepartmentID FROM Departments \n                      WHERE Budget > 100000);\n\n-- تحديث حالة الطلبات بناءً على التاريخ\nUPDATE Orders \nSET Status = 'Expired'\nWHERE OrderDate < (SELECT DATE_SUB(CURDATE(), INTERVAL 30 DAY))\nAND Status = 'Pending';\n\n-- تحديث أسعار المنتجات بناءً على الفئة\nUPDATE Products \nSET Price = Price * 0.9\nWHERE CategoryID IN (SELECT CategoryID FROM Categories \n                    WHERE CategoryName = 'Clearance');</code></pre><h4>أمثلة عملية للـ DELETE:</h4><pre><code class='language-sql'>-- حذف الطلبات القديمة التي تم تسليمها\nDELETE FROM Orders \nWHERE OrderDate < (SELECT DATE_SUB(CURDATE(), INTERVAL 365 DAY))\nAND Status = 'Delivered';\n\n-- حذف العملاء الذين لم يقوموا بأي طلبات\nDELETE FROM Customers \nWHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders \n                        WHERE CustomerID IS NOT NULL);\n\n-- حذف المنتجات غير المبيعة\nDELETE FROM Products \nWHERE ProductID NOT EXISTS (SELECT 1 FROM OrderDetails \n                           WHERE ProductID = Products.ProductID);</code></pre><hr><h2>مقارنة بين Subquery و JOIN</h2><h3>متى نستخدم Subquery ومتى نستخدم JOIN</h3><h4>استخدام JOIN عندما:</h4><ul><li>نحتاج لدمج بيانات من جداول متعددة في النتيجة النهائية.</li><li> نريد أداءً أفضل مع مجموعات البيانات الكبيرة.</li><li> العلاقة بين الجداول واضحة ومحددة.</li></ul><h4>استخدام Subquery عندما:</h4><ul><li>نحتاج لتصفية البيانات بناءً على معايير معقدة.</li><li> نريد كتابة كود أكثر قابلية للقراءة للاستعلامات المعقدة.</li><li> نحتاج لحسابات متدرجة أو معايير ديناميكية.</li></ul><h3>أمثلة عملية توضح الفروق</h3><pre><code class='language-sql'>-- مثال 1: نفس النتيجة بطريقتين\n\n-- باستخدام Subquery\nSELECT CustomerName FROM Customers\nWHERE CustomerID IN (SELECT CustomerID FROM Orders \n                    WHERE OrderDate >= '2024-01-01');\n\n-- باستخدام JOIN (عادة أسرع)\nSELECT DISTINCT C.CustomerName \nFROM Customers C\nINNER JOIN Orders O ON C.CustomerID = O.CustomerID\nWHERE O.OrderDate >= '2024-01-01';</code></pre><pre><code class='language-sql'>-- مثال 2: حالة يفضل فيها Subquery\n\n-- البحث عن المنتجات الأغلى من متوسط سعر فئتها (أوضح وأسهل فهماً)\nSELECT ProductName, Price, Category\nFROM Products P1\nWHERE Price > (SELECT AVG(Price) FROM Products P2 \n              WHERE P2.Category = P1.Category);\n\n-- بـ JOIN (أكثر تعقيداً وأقل وضوحاً)\nSELECT P1.ProductName, P1.Price, P1.Category\nFROM Products P1\nINNER JOIN (SELECT Category, AVG(Price) AS AvgPrice \n           FROM Products GROUP BY Category) P2\nON P1.Category = P2.Category\nWHERE P1.Price > P2.AvgPrice;</code></pre><pre><code class='language-sql'>-- مثال 3: حالة يفضل فيها JOIN\n\n-- إظهار تفاصيل الطلبات مع معلومات العميل (الطريقة المثلى)\nSELECT O.OrderID, O.OrderDate, C.CustomerName, C.City\nFROM Orders O\nINNER JOIN Customers C ON O.CustomerID = C.CustomerID;\n\n-- بـ Subquery (غير عملي هنا)\nSELECT OrderID, OrderDate,\n       (SELECT CustomerName FROM Customers \n        WHERE CustomerID = Orders.CustomerID) AS CustomerName,\n       (SELECT City FROM Customers \n        WHERE CustomerID = Orders.CustomerID) AS City\nFROM Orders;</code></pre><hr><h2>أفضل الممارسات (Best Practices)</h2><h3>تحسين الأداء</h3><h4>استخدام EXISTS بدلاً من IN</h4><pre><code class='language-sql'>-- أفضل للأداء\nSELECT CustomerName FROM Customers C\nWHERE EXISTS (SELECT 1 FROM Orders O \n              WHERE O.CustomerID = C.CustomerID);\n\n-- أبطأ مع البيانات الكبيرة\nSELECT CustomerName FROM Customers\nWHERE CustomerID IN (SELECT CustomerID FROM Orders);</code></pre><h4>تجنب الاستعلامات المترابطة عند الإمكان</h4><pre><code class='language-sql'>-- بطيء: استعلام مترابط\nSELECT ProductName FROM Products P\nWHERE Price > (SELECT AVG(Price) FROM Products \n              WHERE Category = P.Category);\n\n-- أسرع: استعلام غير مترابط مع JOIN\nSELECT P.ProductName \nFROM Products P\nINNER JOIN (SELECT Category, AVG(Price) AS AvgPrice \n           FROM Products GROUP BY Category) Avg\nON P.Category = Avg.Category\nWHERE P.Price > Avg.AvgPrice;</code></pre><h3>تقليل التعقيد</h3><h4>استخدام CTEs للاستعلامات المعقدة</h4><pre><code class='language-sql'>-- بدلاً من استعلامات متداخلة معقدة\nWITH HighValueCustomers AS (\n    SELECT CustomerID, SUM(TotalAmount) AS TotalSpent\n    FROM Orders\n    GROUP BY CustomerID\n    HAVING SUM(TotalAmount) > 10000\n),\nCustomerOrders AS (\n    SELECT CustomerID, COUNT(*) AS OrderCount\n    FROM Orders\n    GROUP BY CustomerID\n)\nSELECT C.CustomerName, H.TotalSpent, O.OrderCount\nFROM Customers C\nINNER JOIN HighValueCustomers H ON C.CustomerID = H.CustomerID\nINNER JOIN CustomerOrders O ON C.CustomerID = O.CustomerID;</code></pre><h3>ملاحظات عن الـ Indexing وتأثيره</h3><h4>إنشاء فهارس على الأعمدة المستخدمة في الاستعلامات الفرعية</h4><pre><code class='language-sql'>-- إنشاء فهارس لتحسين أداء الاستعلامات الفرعية\nCREATE INDEX idx_orders_customerid ON Orders(CustomerID);\nCREATE INDEX idx_employees_departmentid ON Employees(DepartmentID);</code></pre><h4>مراقبة خطط التنفيذ</h4><pre><code class='language-sql'>-- استخدام EXPLAIN لفهم كيفية تنفيذ الاستعلام\nEXPLAIN SELECT CustomerName FROM Customers\nWHERE CustomerID IN (SELECT CustomerID FROM Orders \n                    WHERE OrderDate >= '2024-01-01');</code></pre><hr><h2>خاتمة</h2><h3>ملخص لأهمية Subquery</h3><p>الاستعلامات الفرعية تُعد أداة قوية ومرنة في SQL تُمكن المطورين من كتابة استعلامات معقدة بطريقة منظمة وقابلة للفهم. رغم أن الـ JOINs قد تكون أسرع في كثير من الحالات، إلا أن الاستعلامات الفرعية توفر وضوحاً في المنطق وسهولة في الصيانة.</p><h3>نصائح للطلاب والمطورين الجدد</h3><ul><li><strong>ابدأ بالأساسيات:</strong> تعلم الاستعلامات الفرعية البسيطة قبل الانتقال للمعقدة.</li><li><strong>فهم الفرق بين الأنواع:</strong> اعرف متى تستخدم correlated vs non-correlated subqueries.</li><li><strong>اختبر الأداء:</strong> قارن دائماً بين الـ subquery والـ JOIN واختر الأنسب.</li><li><strong>استخدم الفهارس:</strong> تأكد من وجود فهارس مناسبة على الأعمدة المستخدمة.</li><li><strong>تجنب التعقيد المفرط:</strong> استخدم CTEs أو قسم الاستعلام إلى خطوات عند الحاجة.</li><li><strong>استخدم EXPLAIN:</strong> لفهم كيفية تنفيذ قاعدة البيانات لاستعلاماتك.</li></ul><p>الممارسة العملية هي أفضل طريقة لإتقان الاستعلامات الفرعية.</p>"
}
]

